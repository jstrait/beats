#!/usr/bin/env ruby

start_time = Time.now

require "optparse"
require "beats"

include Beats

USAGE_INSTRUCTIONS = ""

def parse_options
  options = {:split => false}

  optparse = OptionParser.new do |opts|
    opts.banner = "usage: beats [options] input_file [output_file]"

    opts.on("-s", "--split", "Save each track to an individual wave file") do
      options[:split] = true
    end

    opts.on("-p", "--pattern PATTERN_NAME", "Output a single pattern instead of the whole song" ) do |p|
      options[:pattern] = p
    end

    opts.on("--path BASE_PATH", "The base path used to load sound files with relative paths.") do |base_path|
      options[:base_path] = base_path
    end

    opts.on("-v", "--version", "Display version number and exit") do
      puts "Beats Drum Machine #{Beats::VERSION}"
      exit
    end

    opts.on( "-h", "--help", "Display this screen and exit" ) do
      puts opts
      exit
    end
  end

  USAGE_INSTRUCTIONS << optparse.to_s
  optparse.parse!

  options
end

def print_error(error, input_file_name)
  case error
  when OptionParser::InvalidOption
    puts "beats: illegal option #{error.args.join(' ')}"
    puts USAGE_INSTRUCTIONS
  when Errno::ENOENT
    puts "Song file '#{input_file_name}' not found.\n"
  when SongParser::ParseError
    puts "Song file '#{input_file_name}' has an error:\n"
    puts "  #{error}\n"
  when StandardError
    puts "An error occured while generating sound for '#{input_file_name}':\n"
    puts "  #{error}\n"
  else
    puts "An unexpected error occured while running Beats Drum Machine:"
    puts "  #{error}\n"
  end
end

begin
  options = parse_options

  if ARGV.empty?
    puts USAGE_INSTRUCTIONS
    exit
  end

  input_file_name = ARGV[0]
  output_file_name = ARGV[1]

  beats_runner = BeatsRunner.new(input_file_name, output_file_name, options)

  output = beats_runner.run()
  duration = output[:duration]
  puts "#{duration.minutes}:#{duration.seconds.to_s.rjust(2, '0')} of audio written in #{Time.now - start_time} seconds."
rescue => error
  print_error(error, input_file_name)
  exit(false)
end
